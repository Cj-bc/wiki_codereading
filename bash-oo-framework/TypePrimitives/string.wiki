= Contents =
    - [[#string.=()|string.=()]]
    - [[#string.toUpper()|string.toUpper()]]
    - [[#string.toArray()|string.toArray()]]
    - [[#string.getMatchGroups()|string.getMatchGroups()]]
    - [[#string.match()|string.match()]]
    - [[#string.toJSON()|string.toJSON()]]
    - [[#string.forEachChar()|string.forEachChar()]]


== string.=() ==

```bash
string.=() {
  [string] value

  this="$value"

  @return
}
```


== string.toUpper() ==

```bash
string.toUpper() {
  @return:value "${this^^}"
}
```


== string.toArray() ==

```bash
string.toArray() {
  [string] separationCharacter=$'\n' # $'\UFAFAF'

  array returnArray

	local newLine=$'\n'
	local string="${this//"$newLine"/"$separationCharacter"}"
	local IFS=$separationCharacter
	local element
	for element in $string
	do
		returnArray+=( "$element" )
	done

	local newLines=${string//[^$separationCharacter]}
	local -i trailingNewLines=$(( ${#newLines} - ${#returnArray[@]} + 1 ))
	while (( trailingNewLines-- ))
	do
		returnArray+=( "" )
	done

  @return returnArray
}
```


== string.getMatchGroups() ==

```bash
string.getMatchGroups() {
  @handleless @required [string] regex
  [string] returnMatchNumber='@' # @ means all

  array returnArray

  subject="matchGroups" Log "string to match on: $this"

  local -i matchNo=0
  local string="$this"
  while [[ "$string" =~ $regex ]]
  do
    subject="regex" Log "match $matchNo: ${BASH_REMATCH[*]}"

    if [[ "$returnMatchNumber" == "@" || $matchNo -eq "$returnMatchNumber" ]]
    then
      returnArray+=( "${BASH_REMATCH[@]}" )
      [[ "$returnMatchNumber" == "@" ]] || { @return returnArray && return 0; }
    fi
    # cut out the match so we may continue
    string="${string/"${BASH_REMATCH[0]}"}" # "
    matchNo+=1
  done

  @return returnArray
}
```

第一引数として渡した正規表現にマッチする文字列を配列で返す。
また、第二引数として数字が渡された場合、その数字n番目に一致する部分を返す。


== string.match() ==


```bash
string.match() {
	@handleless @required [string] regex
	[integer] capturingGroup=0
	[string] returnMatchNumber=0 # @ means all

	DEBUG subject="string.match" Log "string to match on: $this"

	array allMatches=$(this getMatchGroups "$regex" "$returnMatchNumber")

	@return:value "${allMatches[$capturingGroup]}"
}
```


== string.toJSON() ==

```bash
string.toJSON() {
  ## http://stackoverflow.com/a/3020108/595157

  string escaped="$this"
  escaped=$(var: escaped forEachChar '(( 16#$(var: char getCharCode) < 20 )) && printf "\\${char}" || printf "$char"')

  escaped="${escaped//\\/\\\\}" ## slashes
  escaped="\"${escaped//\"/\\\"}\"" ## quotes

  @return escaped
}
```


== string.forEachChar() ==


```bash
string.forEachChar() {
  [string] action

  string char
  integer index

  string methodName=__string_forEachChar_temp_method

  eval "$methodName() { $action ; }"

  for (( index=0; index<${#this}; index++ ))
  do
    char="${this:$index:1}"
    $methodName "$char" "$index"
  done

  unset -f $methodName

  @return
}
```


string.getCharCode()

```bash
string.getCharCode() {
  ## returns char code of the first character
  @return:value $(printf %x "'$this")
}
```
